; https://docs.platformio.org/page/projectconf.html

[env:esp32dev]

; Official PlatformIO build - painfully out of date but still works for now
; PlatformIO does not currently support ESP32 Core for Arduino v3.x
platform = espressif32 @ 6.7.0

; Tasmota fork - smaller build and up-to-date with Arduino - although certain features are not present (including WiFiClientSecure, which apps like the Stock Ticker need)
#platform = https://github.com/tasmota/platform-espressif32/releases/download/2024.07.11/platform-espressif32.zip

; Just use the official ESP32 Core for Arduino libraries - but this results in builds that are often too large
; https://github.com/platformio/platform-espressif32/issues/1225#issuecomment-2155602773
; platform = espressif32
; platform_packages=
;   framework-arduinoespressif32 @ https://github.com/espressif/arduino-esp32.git#3.0.2
;   framework-arduinoespressif32-libs @ https://github.com/espressif/arduino-esp32/releases/download/3.0.2/esp32-arduino-libs-3.0.2.zip

; Another fork that results in large build sizes - doesn't appear to have a significant advantage over options above other than being on the latest Arduino v3.x
;platform = https://github.com/pioarduino/platform-espressif32/releases/download/51.03.03/platform-espressif32.zip

board = esp32dev
framework = arduino
lib_deps = 
	; For driving the LED matrix itself
	mrfaptastic/ESP32 HUB75 LED MATRIX PANEL DMA Display@^3.0.11
	adafruit/Adafruit GFX Library@^1.11.10

	; For animations
	bitbank2/AnimatedGIF@^2.1.1
	fastled/FastLED@^3.7.0

	; For sensors
	adafruit/Adafruit BusIO@^1.16.1
	adafruit/Adafruit Unified Sensor@^1.1.14
	adafruit/Adafruit BME680 Library@^2.0.4
	claws/BH1750@^1.3.0

	; For web stuff
	mathieucarbou/ESP Async WebServer@^3.0.6
	bblanchon/ArduinoJson@^7.1.0
	adafruit/RTClib@^2.1.4

	; Built-in libraries
	DNSServer
	ESP32 Async UDP
	FS
	HTTPClient
	SD
	SPI
	Update
	WiFi
	Wire
	WiFiClientSecure

	; These seem to be required if using ESP32 Core for Arduino v3.x
	;Networking
	;NetworkClientSecure

monitor_speed = 115200

; Basic OTA update functionality
; So you can "Upload" code from the PlatformIO sidebar in VS Code, and it will be sent directly to the ESP32
; But this requires it to be accessible over the network, and have an IP address as defined in 
upload_protocol = custom
upload_command = curl --progress-bar -F "file=@$SOURCE" "http://$IP/updateFirmware"

; These scripts run before every build, and before every upload, respectively
extra_scripts = 
	pre:scripts/generate_web_ui.py
	pre:scripts/upload_firmware.py