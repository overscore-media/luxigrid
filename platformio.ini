; https://docs.platformio.org/page/projectconf.html

[env:esp32dev]

board = esp32dev
framework = arduino
; Using the pioarduino fork, because the official PlatformIO distribution doesn't support the latest Arduino libraries
; Eventually would be nice to see if we can strip out unused ESP-IDF/Arduino components, but this works fine for now
platform = https://github.com/pioarduino/platform-espressif32/releases/download/stable/platform-espressif32.zip

lib_deps = 
	; For driving the LED matrix itself
	mrfaptastic/ESP32 HUB75 LED MATRIX PANEL DMA Display@^3.0.11
	adafruit/Adafruit GFX Library@^1.11.11

	; For animations
	bitbank2/AnimatedGIF@^2.1.1
	fastled/FastLED@^3.9.2

	; For sensors
	adafruit/Adafruit BusIO@^1.16.2
	adafruit/Adafruit Unified Sensor@^1.1.14
	adafruit/Adafruit BME680 Library@^2.0.5
	claws/BH1750@^1.3.0

	; For web stuff
    mathieucarbou/ESPAsyncWebServer@^3.3.22
	bblanchon/ArduinoJson@^7.2.0
	adafruit/RTClib@^2.1.4

	; Built-in Arduino libraries
	DNSServer
	ESP32 Async UDP
	FS
	HTTPClient
	SD
	SPI
	Update
	WiFi
	Wire
	Networking
	NetworkClientSecure
	WebServer

monitor_speed = 115200

; Basic OTA update functionality
; So you can "Upload" code from the PlatformIO sidebar in VS Code, and it will be sent directly to the ESP32
; But this requires it to be accessible over the network, and have an IP address as defined in 
upload_protocol = custom
upload_command = curl --progress-bar -F "file=@$SOURCE" "http://$IP/updateFirmware" -XPUT

; These scripts run before every build, and before every upload, respectively
extra_scripts = 
	pre:scripts/generate_web_ui.py
	pre:scripts/upload_firmware.py

; This ensures we extract as much flash memory space as practical
; With OTA enabled, we have about 1.75MB free, which should be sufficient
board_build.partitions = partitions.csv

# For generating all apps at once
[env:all]

extends = env:esp32dev
; extra_scripts =
; 	post:scripts/build_all_apps.py